#!/bin/bash
# Ruuvi Home Deployment Script
# Handles GitHub Actions deployment updates
# Generated from template by setup script

set -e

# Configuration
PROJECT_DIR="{{ project.directory }}"
LOG_FILE="{{ directories.logs }}/deployment.log"
TAG=${1:-latest}
BACKUP_DIR="{{ directories.backups }}"
MAX_DEPLOY_TIME=300
HEALTH_CHECK_RETRIES=10
HEALTH_CHECK_INTERVAL=15

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Logging functions
log_message() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

log_info() {
    log_message "INFO" "$1"
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    log_message "WARN" "$1"
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    log_message "ERROR" "$1"
    echo -e "${RED}[ERROR]${NC} $1"
}

log_success() {
    log_message "SUCCESS" "$1"
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Cleanup function for graceful exit
cleanup() {
    local exit_code=$?
    if [ $exit_code -ne 0 ]; then
        log_error "Deployment failed with exit code: $exit_code"
        log_info "Check logs for details: $LOG_FILE"
    fi
    exit $exit_code
}

# Set up cleanup trap
trap cleanup EXIT

# Validate environment
validate_environment() {
    log_info "Validating deployment environment"
    
    if [ ! -d "$PROJECT_DIR" ]; then
        log_error "Project directory not found: $PROJECT_DIR"
        return 1
    fi
    
    if [ ! -f "$PROJECT_DIR/docker-compose.yml" ]; then
        log_error "Docker Compose file not found"
        return 1
    fi
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker not found"
        return 1
    fi
    
    if ! command -v git &> /dev/null; then
        log_error "Git not found"
        return 1
    fi
    
    log_success "Environment validation passed"
    return 0
}

# Create pre-deployment backup
create_backup() {
    log_info "Creating pre-deployment backup"
    
    local backup_timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_file="$BACKUP_DIR/pre_deploy_backup_${backup_timestamp}.sql.gz"
    
    # Ensure backup directory exists
    mkdir -p "$BACKUP_DIR"
    
    # Create database backup
    if docker-compose exec -T timescaledb pg_dump -U {{ database.user }} {{ database.name }} | gzip > "$backup_file"; then
        log_success "Backup created: $(basename "$backup_file")"
        echo "$backup_file"
        return 0
    else
        log_error "Backup creation failed"
        return 1
    fi
}

# Update repository
update_repository() {
    log_info "Updating repository to latest version"
    
    # Fetch latest changes
    if ! git fetch origin; then
        log_error "Failed to fetch repository updates"
        return 1
    fi
    
    # Get current and target commits
    local current_commit=$(git rev-parse HEAD)
    local target_commit=$(git rev-parse origin/{{ project.branch }})
    
    if [ "$current_commit" = "$target_commit" ]; then
        log_info "Repository already up to date"
        return 0
    fi
    
    log_info "Updating from $current_commit to $target_commit"
    
    # Reset to latest main branch
    if ! git reset --hard "origin/{{ project.branch }}"; then
        log_error "Failed to reset to latest branch"
        return 1
    fi
    
    log_success "Repository updated successfully"
    return 0
}

# Pull latest Docker images
pull_docker_images() {
    log_info "Pulling latest Docker images"
    
    if ! timeout $MAX_DEPLOY_TIME docker-compose pull; then
        log_error "Failed to pull Docker images"
        return 1
    fi
    
    log_success "Docker images updated"
    return 0
}

# Stop services gracefully
stop_services() {
    log_info "Stopping services gracefully"
    
    # Stop containers with timeout
    if ! timeout 60 docker-compose down; then
        log_warn "Graceful shutdown timed out, forcing stop"
        docker-compose kill
        docker-compose rm -f
    fi
    
    log_success "Services stopped"
    return 0
}

# Start services
start_services() {
    log_info "Starting services with updated images"
    
    if ! timeout $MAX_DEPLOY_TIME docker-compose up -d --force-recreate --remove-orphans; then
        log_error "Failed to start services"
        return 1
    fi
    
    log_success "Services started"
    return 0
}

# Wait for services to be healthy
wait_for_health() {
    log_info "Waiting for services to be healthy"
    
    local attempt=1
    while [ $attempt -le $HEALTH_CHECK_RETRIES ]; do
        log_info "Health check attempt $attempt/$HEALTH_CHECK_RETRIES"
        
        local healthy=true
        
        # Check database health
        if ! docker-compose exec -T timescaledb pg_isready -U {{ database.user }} -d {{ database.name }} &>/dev/null; then
            log_warn "Database not ready"
            healthy=false
        fi
        
        # Check API health
        if ! curl -sf http://localhost:{{ ports.api }}/health &>/dev/null; then
            log_warn "API not ready"
            healthy=false
        fi
        
        # Check frontend health
        if ! curl -sf http://localhost:{{ ports.frontend }}/health &>/dev/null; then
            log_warn "Frontend not ready"
            healthy=false
        fi
        
        if [ "$healthy" = true ]; then
            log_success "All services are healthy"
            return 0
        fi
        
        if [ $attempt -lt $HEALTH_CHECK_RETRIES ]; then
            log_info "Waiting ${HEALTH_CHECK_INTERVAL}s before next check"
            sleep $HEALTH_CHECK_INTERVAL
        fi
        
        ((attempt++))
    done
    
    log_error "Health check failed after $HEALTH_CHECK_RETRIES attempts"
    return 1
}

# Run post-deployment validation
validate_deployment() {
    log_info "Running post-deployment validation"
    
    # Check container status
    local unhealthy_containers=$(docker-compose ps --format json | jq -r 'select(.State != "running") | .Name' 2>/dev/null || true)
    if [ -n "$unhealthy_containers" ]; then
        log_error "Unhealthy containers found: $unhealthy_containers"
        return 1
    fi
    
    # Run health check script if available
    if [ -f "$PROJECT_DIR/scripts/health-check.py" ]; then
        log_info "Running comprehensive health check"
        if ! python3 "$PROJECT_DIR/scripts/health-check.py"; then
            log_error "Comprehensive health check failed"
            return 1
        fi
    fi
    
    log_success "Deployment validation passed"
    return 0
}

# Cleanup old resources
cleanup_resources() {
    log_info "Cleaning up old Docker resources"
    
    # Remove unused images
    docker image prune -f &>/dev/null || log_warn "Failed to prune images"
    
    # Remove unused volumes
    docker volume prune -f &>/dev/null || log_warn "Failed to prune volumes"
    
    # Remove unused networks
    docker network prune -f &>/dev/null || log_warn "Failed to prune networks"
    
    log_success "Resource cleanup completed"
}

# Rollback deployment
rollback_deployment() {
    log_error "Rolling back deployment"
    
    # Try to restore from backup if available
    local latest_backup=$(ls -t "$BACKUP_DIR"/pre_deploy_backup_*.sql.gz 2>/dev/null | head -1)
    if [ -n "$latest_backup" ]; then
        log_info "Attempting to restore from backup: $(basename "$latest_backup")"
        # Note: Full rollback implementation would need database restore logic
        log_warn "Manual intervention may be required for complete rollback"
    fi
    
    # Try to restart with previous images
    log_info "Attempting to restart services"
    docker-compose up -d || log_error "Failed to restart services"
}

# Main deployment function
main() {
    log_info "Starting deployment for tag: $TAG"
    log_info "Deployment initiated by: ${USER:-unknown}"
    log_info "Project directory: $PROJECT_DIR"
    
    # Change to project directory
    cd "$PROJECT_DIR"
    
    # Deployment steps
    local backup_file=""
    
    # Validation
    if ! validate_environment; then
        exit 1
    fi
    
    # Create backup
    if backup_file=$(create_backup); then
        log_info "Backup location: $backup_file"
    else
        log_error "Backup failed, aborting deployment"
        exit 1
    fi
    
    # Update repository
    if ! update_repository; then
        log_error "Repository update failed, aborting deployment"
        exit 1
    fi
    
    # Pull new images
    if ! pull_docker_images; then
        log_error "Image pull failed, aborting deployment"
        exit 1
    fi
    
    # Stop services
    if ! stop_services; then
        log_error "Failed to stop services"
        rollback_deployment
        exit 1
    fi
    
    # Start services
    if ! start_services; then
        log_error "Failed to start services"
        rollback_deployment
        exit 1
    fi
    
    # Wait for health
    if ! wait_for_health; then
        log_error "Services failed health check"
        rollback_deployment
        exit 1
    fi
    
    # Validate deployment
    if ! validate_deployment; then
        log_error "Deployment validation failed"
        rollback_deployment
        exit 1
    fi
    
    # Cleanup
    cleanup_resources
    
    # Success
    local deployment_time=$(($(date +%s) - ${DEPLOY_START_TIME:-$(date +%s)}))
    log_success "Deployment completed successfully in ${deployment_time}s"
    log_success "Tag: $TAG"
    log_success "Backup: $(basename "$backup_file")"
    log_info "Application available at: http://{{ ansible_default_ipv4.address | default('localhost') }}:{{ ports.frontend }}"
    
    # Send deployment notification if webhook is configured
    if [ -n "${WEBHOOK_NOTIFICATION_URL:-}" ]; then
        curl -X POST "$WEBHOOK_NOTIFICATION_URL" \
             -H "Content-Type: application/json" \
             -d '{"status":"success","tag":"'$TAG'","timestamp":"'$(date -Iseconds)'"}' \
             &>/dev/null || log_warn "Failed to send deployment notification"
    fi
}

# Record deployment start time
DEPLOY_START_TIME=$(date +%s)

# Execute main function
main "$@"