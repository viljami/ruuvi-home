#!/usr/bin/env python3
"""
GitHub Actions deployment webhook handler for Ruuvi Home
Receives deployment notifications and triggers container updates
"""

import hashlib
import hmac
import json
import logging
import os
import subprocess
import sys
from http.server import HTTPServer, BaseHTTPRequestHandler
from typing import Dict, Any, Optional


class WebhookConfig:
    """Configuration container for webhook settings"""
    
    def __init__(self):
        self.webhook_secret = os.environ.get('WEBHOOK_SECRET', '{{ webhook.secret }}')
        self.webhook_port = int(os.environ.get('WEBHOOK_PORT', '{{ webhook.port }}'))
        self.project_dir = os.environ.get('PROJECT_DIR', '{{ project.directory }}')
        self.log_level = os.environ.get('LOG_LEVEL', '{{ system.log_level }}')
        self.deploy_script = os.path.join(self.project_dir, 'scripts', 'deploy.sh')
    
    def validate(self) -> bool:
        """Validate configuration settings"""
        if not self.webhook_secret:
            logging.error("WEBHOOK_SECRET not configured")
            return False
        
        if not os.path.exists(self.project_dir):
            logging.error(f"Project directory not found: {self.project_dir}")
            return False
        
        if not os.path.exists(self.deploy_script):
            logging.error(f"Deploy script not found: {self.deploy_script}")
            return False
        
        return True


class WebhookHandler(BaseHTTPRequestHandler):
    """HTTP handler for webhook requests"""
    
    def __init__(self, *args, config: WebhookConfig, **kwargs):
        self.config = config
        super().__init__(*args, **kwargs)
    
    def log_message(self, format: str, *args) -> None:
        """Override to use our logging configuration"""
        logging.info(f"HTTP: {format % args}")
    
    def do_POST(self) -> None:
        """Handle POST requests to webhook endpoint"""
        if self.path != '/webhook':
            self._send_error_response(404, "Not Found")
            return
        
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            if content_length > 1024 * 1024:  # 1MB limit
                self._send_error_response(413, "Payload too large")
                return
            
            body = self.rfile.read(content_length)
            
            if not self._verify_signature(body):
                logging.warning("WEBHOOK: Invalid signature received")
                self._send_error_response(401, "Unauthorized")
                return
            
            payload = self._parse_payload(body)
            if not payload:
                self._send_error_response(400, "Invalid JSON payload")
                return
            
            self._process_deployment(payload)
            self._send_success_response()
            
        except Exception as e:
            logging.error(f"WEBHOOK: Request processing failed: {e}")
            self._send_error_response(500, "Internal Server Error")
    
    def _verify_signature(self, body: bytes) -> bool:
        """Verify GitHub webhook signature"""
        signature_header = self.headers.get('X-Hub-Signature-256')
        if not signature_header:
            return False
        
        expected_signature = hmac.new(
            self.config.webhook_secret.encode(),
            body,
            hashlib.sha256
        ).hexdigest()
        
        received_signature = signature_header.replace('sha256=', '')
        return hmac.compare_digest(expected_signature, received_signature)
    
    def _parse_payload(self, body: bytes) -> Optional[Dict[str, Any]]:
        """Parse JSON payload from webhook"""
        try:
            return json.loads(body.decode('utf-8'))
        except (json.JSONDecodeError, UnicodeDecodeError) as e:
            logging.error(f"WEBHOOK: Payload parsing failed: {e}")
            return None
    
    def _process_deployment(self, payload: Dict[str, Any]) -> None:
        """Process deployment webhook payload"""
        action = payload.get('action')
        deployment = payload.get('deployment', {})
        
        if action != 'created':
            logging.info(f"WEBHOOK: Ignoring action: {action}")
            return
        
        environment = deployment.get('environment', 'unknown')
        ref = deployment.get('ref', 'unknown')
        
        logging.info(f"WEBHOOK: Processing deployment - env: {environment}, ref: {ref}")
        
        if environment != 'production':
            logging.info(f"WEBHOOK: Ignoring non-production deployment: {environment}")
            return
        
        self._trigger_deployment(ref)
    
    def _trigger_deployment(self, ref: str) -> None:
        """Trigger the deployment script"""
        try:
            cmd = [self.config.deploy_script, ref]
            logging.info(f"WEBHOOK: Executing deployment command: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                cwd=self.config.project_dir,
                capture_output=True,
                text=True,
                timeout=300  # 5 minute timeout
            )
            
            if result.returncode == 0:
                logging.info(f"WEBHOOK: Deployment completed successfully for ref: {ref}")
            else:
                logging.error(f"WEBHOOK: Deployment failed for ref: {ref}")
                logging.error(f"WEBHOOK: stderr: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            logging.error(f"WEBHOOK: Deployment timeout for ref: {ref}")
        except Exception as e:
            logging.error(f"WEBHOOK: Deployment execution failed: {e}")
    
    def _send_error_response(self, code: int, message: str) -> None:
        """Send HTTP error response"""
        self.send_response(code)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        response = json.dumps({'error': message})
        self.wfile.write(response.encode())
    
    def _send_success_response(self) -> None:
        """Send HTTP success response"""
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        response = json.dumps({'status': 'success'})
        self.wfile.write(response.encode())


class WebhookServer:
    """Webhook server management"""
    
    def __init__(self, config: WebhookConfig):
        self.config = config
        self.server = None
    
    def start(self) -> None:
        """Start the webhook server"""
        if not self.config.validate():
            logging.error("SERVER: Configuration validation failed")
            sys.exit(1)
        
        # Create handler with config injection
        def handler_factory(*args, **kwargs):
            return WebhookHandler(*args, config=self.config, **kwargs)
        
        try:
            self.server = HTTPServer(('0.0.0.0', self.config.webhook_port), handler_factory)
            logging.info(f"SERVER: Starting webhook server on port {self.config.webhook_port}")
            self.server.serve_forever()
            
        except KeyboardInterrupt:
            logging.info("SERVER: Shutdown requested")
            self.stop()
        except Exception as e:
            logging.error(f"SERVER: Failed to start: {e}")
            sys.exit(1)
    
    def stop(self) -> None:
        """Stop the webhook server"""
        if self.server:
            logging.info("SERVER: Stopping webhook server")
            self.server.shutdown()
            self.server.server_close()


def setup_logging(config: WebhookConfig) -> None:
    """Configure logging with proper format and level"""
    log_format = '%(asctime)s - %(levelname)s - %(message)s'
    log_level = getattr(logging, config.log_level.upper(), logging.INFO)
    
    logging.basicConfig(
        level=log_level,
        format=log_format,
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler('{{ directories.logs }}/webhook.log')
        ]
    )


def main() -> None:
    """Main entry point"""
    config = WebhookConfig()
    setup_logging(config)
    
    logging.info("WEBHOOK: Starting Ruuvi Home deployment webhook")
    
    server = WebhookServer(config)
    server.start()


if __name__ == '__main__':
    main()