#!/bin/bash
# Module: System Setup
# Description: Base system preparation including packages and shell configuration
# Dependencies: 00-validation.sh (system requirements)

set -e

# Module context for logging
readonly MODULE_CONTEXT="SYSTEM"

# Get script directory for relative imports
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$(dirname "$SCRIPT_DIR")/lib"

# Source dependencies
source "$LIB_DIR/logging.sh"
source "$LIB_DIR/validation.sh"

# Required packages for Ruuvi Home
readonly REQUIRED_PACKAGES=(
    "curl"
    "git"
    "fish"
    "htop"
    "nano"
    "unzip"
    "wget"
    "ca-certificates"
    "gnupg"
    "lsb-release"
    "software-properties-common"
    "apt-transport-https"
    "python3"
    "python3-pip"
    "python3-venv"
    "logrotate"
    "cron"
    "rsync"
    "jq"
)

# Update package lists
update_package_lists() {
    local context="$MODULE_CONTEXT"
    
    log_info "$context" "Updating package lists"
    
    if ! apt-get -qq update; then
        log_error "$context" "Failed to update package lists"
        return 1
    fi
    
    log_success "$context" "Package lists updated"
    return 0
}

# Install required packages
install_required_packages() {
    local context="$MODULE_CONTEXT"
    local failed_packages=()
    
    log_info "$context" "Installing required packages"
    
    # Update package lists first
    if ! update_package_lists; then
        return 1
    fi
    
    # Install packages with minimal interaction
    export DEBIAN_FRONTEND=noninteractive
    
    local packages_to_install=()
    
    # Check which packages are not installed
    for package in "${REQUIRED_PACKAGES[@]}"; do
        if ! dpkg -l | grep -q "^ii  $package "; then
            packages_to_install+=("$package")
        else
            log_debug "$context" "Package already installed: $package"
        fi
    done
    
    if [ ${#packages_to_install[@]} -eq 0 ]; then
        log_success "$context" "All required packages already installed"
        return 0
    fi
    
    log_info "$context" "Installing ${#packages_to_install[@]} packages: ${packages_to_install[*]}"
    
    if ! apt-get -y -qq install "${packages_to_install[@]}"; then
        log_error "$context" "Failed to install packages: ${packages_to_install[*]}"
        return 1
    fi
    
    # Verify installation
    for package in "${packages_to_install[@]}"; do
        if ! dpkg -l | grep -q "^ii  $package "; then
            failed_packages+=("$package")
        fi
    done
    
    if [ ${#failed_packages[@]} -gt 0 ]; then
        log_error "$context" "Failed to install packages: ${failed_packages[*]}"
        return 1
    fi
    
    log_success "$context" "All required packages installed successfully"
    return 0
}

# Configure Fish shell
configure_fish_shell() {
    local context="$MODULE_CONTEXT"
    
    if [ "$ENABLE_FISH_SHELL" != "true" ]; then
        log_info "$context" "Fish shell configuration disabled"
        return 0
    fi
    
    log_info "$context" "Configuring Fish shell for user: $RUUVI_USER"
    
    # Verify Fish is installed
    if ! command -v fish &> /dev/null; then
        log_error "$context" "Fish shell not installed"
        return 1
    fi
    
    # Get current shell
    local current_shell=$(getent passwd "$RUUVI_USER" | cut -d: -f7)
    local fish_path=$(which fish)
    
    if [ "$current_shell" = "$fish_path" ]; then
        log_success "$context" "Fish shell already configured for $RUUVI_USER"
        return 0
    fi
    
    # Add Fish to /etc/shells if not present
    if ! grep -q "$fish_path" /etc/shells; then
        log_info "$context" "Adding Fish to /etc/shells"
        echo "$fish_path" >> /etc/shells
    fi
    
    # Change user shell to Fish
    if ! chsh -s "$fish_path" "$RUUVI_USER"; then
        log_error "$context" "Failed to set Fish as default shell for $RUUVI_USER"
        return 1
    fi
    
    # Create Fish config directory
    local fish_config_dir="/home/$RUUVI_USER/.config/fish"
    mkdir -p "$fish_config_dir"
    chown -R "$RUUVI_USER:$RUUVI_USER" "/home/$RUUVI_USER/.config"
    
    # Create basic Fish configuration
    cat > "$fish_config_dir/config.fish" << EOF
# Ruuvi Home Fish Configuration
# Auto-generated by setup script

# Set greeting
set fish_greeting "Welcome to Ruuvi Home on \$(hostname)"

# Add common aliases
alias ll='ls -la'
alias la='ls -la'
alias l='ls -l'
alias ..='cd ..'
alias ...='cd ../..'

# Docker aliases for convenience
alias dc='docker-compose'
alias dps='docker ps'
alias dlogs='docker-compose logs -f'

# Ruuvi Home specific aliases
alias ruuvi-logs='journalctl -u ruuvi-home -f'
alias ruuvi-status='systemctl status ruuvi-home ruuvi-webhook'
alias ruuvi-restart='sudo systemctl restart ruuvi-home ruuvi-webhook'

# Set PATH for local scripts
set -gx PATH \$PATH /home/$RUUVI_USER/ruuvi-home/scripts
EOF
    
    chown "$RUUVI_USER:$RUUVI_USER" "$fish_config_dir/config.fish"
    
    log_success "$context" "Fish shell configured for $RUUVI_USER"
    return 0
}

# Configure system timezone
configure_timezone() {
    local context="$MODULE_CONTEXT"
    
    log_info "$context" "Configuring system timezone: $TIMEZONE"
    
    # Check current timezone
    local current_tz=$(timedatectl show -p Timezone --value)
    
    if [ "$current_tz" = "$TIMEZONE" ]; then
        log_success "$context" "Timezone already set to $TIMEZONE"
        return 0
    fi
    
    # Set timezone
    if ! timedatectl set-timezone "$TIMEZONE"; then
        log_error "$context" "Failed to set timezone to $TIMEZONE"
        return 1
    fi
    
    # Verify timezone change
    local new_tz=$(timedatectl show -p Timezone --value)
    if [ "$new_tz" = "$TIMEZONE" ]; then
        log_success "$context" "Timezone set to $TIMEZONE"
    else
        log_error "$context" "Timezone verification failed"
        return 1
    fi
    
    return 0
}

# Configure system locale
configure_locale() {
    local context="$MODULE_CONTEXT"
    local target_locale="en_US.UTF-8"
    
    log_info "$context" "Configuring system locale"
    
    # Check if locale is already configured
    if locale | grep -q "LANG=$target_locale"; then
        log_success "$context" "Locale already configured"
        return 0
    fi
    
    # Generate locale if not present
    if ! locale -a | grep -q "en_US.utf8"; then
        log_info "$context" "Generating locale: $target_locale"
        if ! locale-gen "$target_locale"; then
            log_error "$context" "Failed to generate locale"
            return 1
        fi
    fi
    
    # Update locale
    if ! update-locale LANG="$target_locale"; then
        log_error "$context" "Failed to update locale"
        return 1
    fi
    
    log_success "$context" "Locale configured"
    return 0
}

# Configure log rotation
configure_log_rotation() {
    local context="$MODULE_CONTEXT"
    
    log_info "$context" "Configuring log rotation for Ruuvi Home"
    
    # Create logrotate configuration for Ruuvi Home
    cat > /etc/logrotate.d/ruuvi-home << EOF
$LOG_DIR/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    notifempty
    copytruncate
    su $RUUVI_USER $RUUVI_USER
    create 644 $RUUVI_USER $RUUVI_USER
}
EOF
    
    # Test logrotate configuration
    if ! logrotate -d /etc/logrotate.d/ruuvi-home &>/dev/null; then
        log_error "$context" "Invalid logrotate configuration"
        return 1
    fi
    
    log_success "$context" "Log rotation configured"
    return 0
}

# Enable required services
enable_required_services() {
    local context="$MODULE_CONTEXT"
    local services=("cron")
    
    log_info "$context" "Enabling required system services"
    
    for service in "${services[@]}"; do
        if ! systemctl is-enabled --quiet "$service"; then
            log_info "$context" "Enabling service: $service"
            if ! systemctl enable "$service"; then
                log_error "$context" "Failed to enable service: $service"
                return 1
            fi
        fi
        
        if ! systemctl is-active --quiet "$service"; then
            log_info "$context" "Starting service: $service"
            if ! systemctl start "$service"; then
                log_error "$context" "Failed to start service: $service"
                return 1
            fi
        fi
    done
    
    log_success "$context" "Required services enabled and started"
    return 0
}

# Validate system setup
validate_system_setup() {
    local context="$MODULE_CONTEXT"
    local validation_failed=false
    
    log_info "$context" "Validating system setup"
    
    # Check required commands
    local required_commands=("git" "curl" "fish" "python3" "pip3")
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" &>/dev/null; then
            log_error "$context" "Required command not found: $cmd"
            validation_failed=true
        fi
    done
    
    # Check user shell (if Fish is enabled)
    if [ "$ENABLE_FISH_SHELL" = "true" ]; then
        local user_shell=$(getent passwd "$RUUVI_USER" | cut -d: -f7)
        if [[ "$user_shell" != *"fish"* ]]; then
            log_error "$context" "Fish shell not set for user: $RUUVI_USER"
            validation_failed=true
        fi
    fi
    
    # Check timezone
    local current_tz=$(timedatectl show -p Timezone --value)
    if [ "$current_tz" != "$TIMEZONE" ]; then
        log_error "$context" "Timezone not set correctly: $current_tz (expected: $TIMEZONE)"
        validation_failed=true
    fi
    
    # Check services
    if ! systemctl is-active --quiet cron; then
        log_error "$context" "Cron service not running"
        validation_failed=true
    fi
    
    if [ "$validation_failed" = true ]; then
        log_error "$context" "System setup validation failed"
        return 1
    fi
    
    log_success "$context" "System setup validation passed"
    return 0
}

# Main system setup function
setup_system() {
    local context="$MODULE_CONTEXT"
    local setup_steps=(
        "update_package_lists:Update package lists"
        "install_required_packages:Install required packages"
        "configure_fish_shell:Configure Fish shell"
        "configure_timezone:Configure timezone"
        "configure_locale:Configure locale"
        "configure_log_rotation:Configure log rotation"
        "enable_required_services:Enable required services"
        "validate_system_setup:Validate system setup"
    )
    
    log_section "System Setup"
    log_info "$context" "Starting system setup for user: $RUUVI_USER"
    
    local step_num=1
    local total_steps=${#setup_steps[@]}
    local failed_steps=()
    
    for step in "${setup_steps[@]}"; do
        local func_name="${step%:*}"
        local step_desc="${step#*:}"
        
        log_step "$step_num" "$total_steps" "$step_desc"
        
        if ! $func_name; then
            failed_steps+=("$step_desc")
        fi
        
        ((step_num++))
    done
    
    if [ ${#failed_steps[@]} -gt 0 ]; then
        log_error "$context" "System setup failed at: ${failed_steps[*]}"
        return 1
    fi
    
    log_success "$context" "System setup completed successfully"
    return 0
}

# Export main function
export -f setup_system

# Run setup if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    setup_system
fi