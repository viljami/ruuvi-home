name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      force_build_all:
        description: "Force build all Docker images"
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test job for backend Rust code
  test-backend:
    runs-on: ubuntu-latest
    name: Test Backend

    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_DB: ruuvi_home
          POSTGRES_USER: ruuvi
          POSTGRES_PASSWORD: ruuvi_secret
          POSTGRES_HOST_AUTH_METHOD: trust
          TIMESCALEDB_TELEMETRY: "off"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend

      - name: Run code quality checks
        run: |
          cd backend
          make lint

      - name: Run tests
        env:
          TEST_DATABASE_URL: postgresql://ruuvi:ruuvi_secret@localhost:5432/ruuvi_home
        run: |
          cd backend
          make test

  # Test job for frontend React code
  test-frontend:
    runs-on: ubuntu-latest
    name: Test Frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Run frontend build verification
        run: |
          ./scripts/verify-frontend-build.sh

  # Test job for MQTT simulator
  test-simulator:
    runs-on: ubuntu-latest
    name: Test MQTT Simulator

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          cd docker/mqtt-simulator
          make deps

      - name: Check Python code formatting
        run: |
          cd docker/mqtt-simulator
          make fmt-check

      - name: Run code quality checks
        run: |
          cd docker/mqtt-simulator
          make lint

      - name: Run tests
        run: |
          cd docker/mqtt-simulator
          make test-cov

      - name: Upload coverage to Codecov
        if: github.event_name != 'pull_request'
        uses: codecov/codecov-action@v3
        with:
          file: ./docker/mqtt-simulator/coverage.xml
          flags: simulator

  # Integration test with full stack (DISABLED)
  # integration-test:
  #   runs-on: ubuntu-latest
  #   name: Integration Tests
  #   needs: [test-backend, test-frontend, test-simulator]
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Start test environment
  #       run: |
  #         docker compose -f docker-compose-test.yaml up -d
  #
  #     - name: Wait for services to be ready
  #       run: |
  #         # Wait for mosquitto to be ready
  #         timeout 60 bash -c 'until nc -z localhost 1883; do sleep 2; done'
  #
  #     - name: Run integration tests
  #       run: |
  #         # Run MQTT simulator tests
  #         docker compose -f docker-compose-test.yaml run --rm mqtt-simulator-tests
  #
  #         # Run linting tests
  #         docker compose -f docker-compose-test.yaml run --rm mqtt-simulator-lint
  #
  #     - name: Cleanup
  #       if: always()
  #       run: |
  #         docker compose -f docker-compose-test.yaml down -v

  # Detect changes in different service components
  detect-changes:
    runs-on: ubuntu-latest
    name: Detect Changes
    if: github.event_name != 'pull_request'
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      mqtt-simulator: ${{ steps.changes.outputs.mqtt-simulator }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'docker/mqtt-reader.Dockerfile'
              - 'docker/api-server.Dockerfile'
            frontend:
              - 'frontend/**'
              - 'docker/frontend.Dockerfile'
            mqtt-simulator:
              - 'docker/mqtt-simulator/**'
            docker:
              - 'docker/**'
              - 'docker-compose*.yaml'
              - '.dockerignore'

  # Build MQTT Reader Docker image
  build-mqtt-reader:
    runs-on: ubuntu-latest
    name: Build MQTT Reader
    needs: [test-backend, detect-changes]
    if: |
      github.event_name != 'pull_request' &&
      (needs.detect-changes.outputs.backend == 'true' ||
      needs.detect-changes.outputs.docker == 'true' ||
      github.event_name == 'release' ||
      github.event.inputs.force_build_all == 'true')
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mqtt-reader
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/mqtt-reader.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build API Server Docker image
  build-api-server:
    runs-on: ubuntu-latest
    name: Build API Server
    needs: [test-backend, detect-changes]
    if: |
      github.event_name != 'pull_request' &&
      (needs.detect-changes.outputs.backend == 'true' ||
      needs.detect-changes.outputs.docker == 'true' ||
      github.event_name == 'release' ||
      github.event.inputs.force_build_all == 'true')
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-server
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/api-server.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build Frontend Docker image
  build-frontend:
    runs-on: ubuntu-latest
    name: Build Frontend
    needs: [test-frontend, detect-changes]
    if: |
      github.event_name != 'pull_request' &&
      (needs.detect-changes.outputs.frontend == 'true' ||
      needs.detect-changes.outputs.docker == 'true' ||
      github.event_name == 'release' ||
      github.event.inputs.force_build_all == 'true')
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/frontend.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build MQTT Simulator Docker image
  build-mqtt-simulator:
    runs-on: ubuntu-latest
    name: Build MQTT Simulator
    needs: [test-simulator, detect-changes]
    if: |
      github.event_name != 'pull_request' &&
      (needs.detect-changes.outputs.mqtt-simulator == 'true' ||
      needs.detect-changes.outputs.docker == 'true' ||
      github.event_name == 'release' ||
      github.event.inputs.force_build_all == 'true')
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mqtt-simulator
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./docker/mqtt-simulator
          file: ./docker/mqtt-simulator/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build Summary - coordinates all build jobs
  build-summary:
    runs-on: ubuntu-latest
    name: Build Summary
    needs:
      [
        build-mqtt-reader,
        build-api-server,
        build-frontend,
        build-mqtt-simulator,
      ]
    if: always() && github.event_name != 'pull_request'
    outputs:
      build_success: ${{ steps.summary.outputs.build_success }}

    steps:
      - name: Evaluate build results
        id: summary
        run: |
          echo "MQTT Reader: ${{ needs.build-mqtt-reader.result }}"
          echo "API Server: ${{ needs.build-api-server.result }}"
          echo "Frontend: ${{ needs.build-frontend.result }}"
          echo "MQTT Simulator: ${{ needs.build-mqtt-simulator.result }}"

          # Check if all builds that ran were successful
          if [[ "${{ needs.build-mqtt-reader.result }}" =~ ^(success|skipped)$ ]] && \
             [[ "${{ needs.build-api-server.result }}" =~ ^(success|skipped)$ ]] && \
             [[ "${{ needs.build-frontend.result }}" =~ ^(success|skipped)$ ]] && \
             [[ "${{ needs.build-mqtt-simulator.result }}" =~ ^(success|skipped)$ ]]; then
            echo "build_success=true" >> $GITHUB_OUTPUT
            echo "✅ All builds completed successfully"
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
            echo "❌ One or more builds failed"
            exit 1
          fi

  # Deploy to Raspberry Pi (only on main branch)
  deploy-pi:
    runs-on: ubuntu-latest
    name: Deploy to Raspberry Pi
    needs: [build-summary]
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'release') &&
      needs.build-summary.outputs.build_success == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PI_SSH_KEY }}

      - name: Add Pi to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.PI_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Raspberry Pi
        env:
          PI_HOST: ${{ secrets.PI_HOST }}
          PI_USER: ${{ secrets.PI_USER }}
          GATEWAY_MAC: ${{ secrets.GATEWAY_MAC }}
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          cd /home/pi/ruuvi-home

          # Pull latest code
          git pull origin main

          # Update environment variables
          if [ ! -f .env ]; then
            cp .env.example .env
          fi

          # Update sensitive environment variables from GitHub secrets
          sed -i "s/GATEWAY_MAC=.*/GATEWAY_MAC=${GATEWAY_MAC}/" .env

          # Pull latest images and restart services
          docker compose pull
          docker compose up -d

          # Verify deployment
          sleep 30
          curl -f http://localhost:8080/health || exit 1

          echo "Deployment successful!"
          EOF

          # Copy and execute deployment script
          scp deploy.sh ${PI_USER}@${PI_HOST}:/tmp/
          ssh ${PI_USER}@${PI_HOST} "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"

      - name: Verify deployment
        env:
          PI_HOST: ${{ secrets.PI_HOST }}
          PI_USER: ${{ secrets.PI_USER }}
        run: |
          # Wait a bit for services to fully start
          sleep 60

          # Check service health
          ssh ${PI_USER}@${PI_HOST} "curl -f http://localhost:8080/health"
          ssh ${PI_USER}@${PI_HOST} "docker compose ps"

      - name: Rollback on failure
        if: failure()
        env:
          PI_HOST: ${{ secrets.PI_HOST }}
          PI_USER: ${{ secrets.PI_USER }}
        run: |
          echo "Deployment failed, attempting rollback..."
          ssh ${PI_USER}@${PI_HOST} "cd /home/pi/ruuvi-home && git reset --hard HEAD~1 && docker compose up -d"

  # Security scan for MQTT Reader
  security-scan-mqtt-reader:
    runs-on: ubuntu-latest
    name: Security Scan MQTT Reader
    needs: [build-mqtt-reader, detect-changes]
    if: |
      needs.build-mqtt-reader.result == 'success' && (
        needs.detect-changes.outputs.backend == 'true' ||
        needs.detect-changes.outputs.docker == 'true' ||
        github.event_name == 'release' ||
        github.event.inputs.force_build_all == 'true'
      )

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mqtt-reader@${{ needs.build-mqtt-reader.outputs.image-digest }}
          format: "sarif"
          output: "trivy-results-mqtt-reader.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results-mqtt-reader.sarif"

  # Security scan for API Server
  security-scan-api-server:
    runs-on: ubuntu-latest
    name: Security Scan API Server
    needs: [build-api-server, detect-changes]
    if: |
      needs.build-api-server.result == 'success' && (
        needs.detect-changes.outputs.backend == 'true' ||
        needs.detect-changes.outputs.docker == 'true' ||
        github.event_name == 'release' ||
        github.event.inputs.force_build_all == 'true'
      )

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-server@${{ needs.build-api-server.outputs.image-digest }}
          format: "sarif"
          output: "trivy-results-api-server.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results-api-server.sarif"

  # Security scan for Frontend
  security-scan-frontend:
    runs-on: ubuntu-latest
    name: Security Scan Frontend
    needs: [build-frontend, detect-changes]
    if: |
      needs.build-frontend.result == 'success' && (
        needs.detect-changes.outputs.frontend == 'true' ||
        needs.detect-changes.outputs.docker == 'true' ||
        github.event_name == 'release' ||
        github.event.inputs.force_build_all == 'true'
      )

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend@${{ needs.build-frontend.outputs.image-digest }}
          format: "sarif"
          output: "trivy-results-frontend.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results-frontend.sarif"

  # Security scan for MQTT Simulator
  security-scan-mqtt-simulator:
    runs-on: ubuntu-latest
    name: Security Scan MQTT Simulator
    needs: [build-mqtt-simulator, detect-changes]
    if: |
      needs.build-mqtt-simulator.result == 'success' && (
        needs.detect-changes.outputs.mqtt-simulator == 'true' ||
        needs.detect-changes.outputs.docker == 'true' ||
        github.event_name == 'release' ||
        github.event.inputs.force_build_all == 'true'
      )

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: |
            ${{env.REGISTRY}}/${{env.IMAGE_NAME}}/mqtt-simulator@${{needs.build-mqtt-simulator.outputs.image-digest}}
          format: "sarif"
          output: "trivy-results-mqtt-simulator.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results-mqtt-simulator.sarif"

  # Notify on deployment
  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment
    needs: [deploy-pi]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify deployment status
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ needs.deploy-pi.result }}" == "success" ]; then
            STATUS="✅ SUCCESS"
            COLOR="good"
          else
            STATUS="❌ FAILED"
            COLOR="danger"
          fi

          if [ -n "$WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"Ruuvi Home Deployment $STATUS\", \"color\":\"$COLOR\"}" \
              $WEBHOOK_URL
          fi
